buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = mod_group
archivesBaseName = mod_fileName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

    mappings channel: mappings_channel, version: mappings_version

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                roughmobsrevamped {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                roughmobsrevamped {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'roughmobsrevamped', '--all', '--output', file('src/generated/resources/')

            mods {
                roughmobsrevamped {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	maven { url 'https://maven.mcmoddev.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:" + minecraft_version + "-" + forge_version
	
	// Game-Stages support
	// compile "net.darkhax.gamestages:GameStages-${minecraft_version}:${gameStages_version}"
	// compile "net.darkhax.bookshelf:Bookshelf-${minecraft_version}:${bookshelf_version}"
}

// Store properties into Manifest file.
jar {
    manifest {
        attributes([
            'Timestamp': System.currentTimeMillis(),
            "Specification-Title"     : "${mod_id}",
			"Specification-Vendor"    : "${mod_vendor}",
			"Specification-Version"   : "${mod_version}",
			"Implementation-Title"    : project.archivesBaseName,
			"Implementation-Version"  : project.version,
			"Implementation-Vendor"   : "${mod_vendor}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java"			  : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-With-Forge"		  : "${forge_version}",
            "Supports-GameStages"	  : "${gameStages_version}",
			"Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// Jar signing
import net.minecraftforge.gradle.common.task.SignJar

task signJar(type: SignJar, dependsOn: jar) {
	// Skips if the keyStore property is missing.
	onlyIf {
		project.hasProperty('keyStore')
	}

	// findProperty allows us to reference the property without it existing.
	// Using project.propName would cause the script to fail validation if the property did not exist.
	keyStore = project.findProperty('keyStore')
	alias = project.findProperty('keyStoreAlias')
	storePass = project.findProperty('keyStorePass')
	keyPass = project.findProperty('keyStoreKeyPass')
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

// Runs the signJar task automatically when build is run.
build.dependsOn signJar

// Process resources on build
processResources {
	// This will ensure that this task is redone when the versions change.
	inputs.property 'version', project.version

	// Replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		// Replace version
		expand 'version': project.version
	}

	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes([
            'Timestamp': System.currentTimeMillis(),
            "Specification-Title"     : "${mod_id}",
			"Specification-Vendor"    : "${mod_vendor}",
			"Specification-Version"   : "${mod_version}",
			"Implementation-Title"    : project.archivesBaseName,
			"Implementation-Version"  : project.version,
			"Implementation-Vendor"   : "${mod_vendor}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java"			  : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-With-Forge"		  : "${forge_version}",
            "Supports-GameStages"	  : "${gameStages_version}",
			"Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"
        ])
    }
}

// Create Sources Jar
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
build.dependsOn sourcesJar

artifacts {
    archives deobfJar
	archives sourcesJar
}